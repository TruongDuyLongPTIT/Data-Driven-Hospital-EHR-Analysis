version: '3.8'

services:
  # ------------------ Spark Master ------------------
  spark-master:
    image: bitnami/spark:3.5.0
    container_name: spark-master
    hostname: spark-master
    user: "0"  # Run as root to avoid permission issues
    environment:
      - SPARK_MODE=master
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
      - HADOOP_USER_NAME=spark
      - SPARK_USER=spark
      - JAVA_OPTS=-Djava.security.auth.login.config=/dev/null
    ports:
      - "8080:8080"   # Spark Web UI
      - "7077:7077"   # Spark Master Port
    networks:
      - spark-net
    volumes:
      - ./data:/opt/bitnami/spark/data
      - ./spark-jars:/opt/bitnami/spark/ivy:z

  # ------------------ Spark Workers ------------------
  spark-worker-1:
    image: bitnami/spark:3.5.0
    container_name: spark-worker-1
    hostname: spark-worker-1
    user: "0"
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark-master:7077
      - HADOOP_USER_NAME=spark
      - SPARK_USER=spark
      - JAVA_OPTS=-Djava.security.auth.login.config=/dev/null
    depends_on:
      - spark-master
    ports:
      - "8081:8081"
    networks:
      - spark-net
    volumes:
      - ./spark-jars:/opt/bitnami/spark/ivy:z

  spark-worker-2:
    image: bitnami/spark:3.5.0
    container_name: spark-worker-2
    hostname: spark-worker-2
    user: "0"
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark-master:7077
      - HADOOP_USER_NAME=spark
      - SPARK_USER=spark
      - JAVA_OPTS=-Djava.security.auth.login.config=/dev/null
    depends_on:
      - spark-master
    ports:
      - "8082:8081"
    networks:
      - spark-net
    volumes:
      - ./spark-jars:/opt/bitnami/spark/ivy:z

  spark-worker-3:
    image: bitnami/spark:3.5.0
    container_name: spark-worker-3
    hostname: spark-worker-3
    user: "0"
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark-master:7077
      - HADOOP_USER_NAME=spark
      - SPARK_USER=spark
      - JAVA_OPTS=-Djava.security.auth.login.config=/dev/null
    depends_on:
      - spark-master
    ports:
      - "8083:8081"
    networks:
      - spark-net
    volumes:
      - ./spark-jars:/opt/bitnami/spark/ivy:z

  # ------------------ MinIO Cluster (3 Nodes) ------------------
  minio1:
    image: quay.io/minio/minio:latest
    container_name: minio1
    hostname: minio1
    volumes:
      - minio1-data:/data
    environment:
      - MINIO_ROOT_USER=minio
      - MINIO_ROOT_PASSWORD=minio123
    command: ["server", "http://minio{1...3}/data", "--console-address", ":9001"]
    ports:
      - "9001:9001"
      - "9000:9000"
    networks:
      - spark-net

  minio2:
    image: quay.io/minio/minio:latest
    container_name: minio2
    hostname: minio2
    volumes:
      - minio2-data:/data
    environment:
      - MINIO_ROOT_USER=minio
      - MINIO_ROOT_PASSWORD=minio123
    command: ["server", "http://minio{1...3}/data"]
    networks:
      - spark-net

  minio3:
    image: quay.io/minio/minio:latest
    container_name: minio3
    hostname: minio3
    volumes:
      - minio3-data:/data
    environment:
      - MINIO_ROOT_USER=minio
      - MINIO_ROOT_PASSWORD=minio123
    command: ["server", "http://minio{1...3}/data"]
    networks:
      - spark-net

  # ------------------ Postgres DB ------------------
  postgres:
    image: postgres:15.6
    container_name: postgres_db
    restart: unless-stopped
    environment:
      POSTGRES_DB: myapp_db
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin
      PGDATA: /var/lib/postgresql/data/pgdata
    command: ["postgres", "-c", "max_connections=10000"]
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
      - "C:/DataUser/MIMIC Dataset/mimic-iv-3.1/hosp:/csv"
    networks:
      - spark-net

  # ------------------ Airflow (Standalone) ------------------
  airflow:
    image: apache/airflow:2.8.1-python3.11
    container_name: airflow_standalone
    command: standalone
    environment:
      - AIRFLOW__CORE__LOAD_EXAMPLES=false
      - AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION=true
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./airflow/logs:/opt/airflow/logs
      - ./airflow/plugins:/opt/airflow/plugins
      - ./data:/opt/airflow/data
    ports:
      - "8090:8080"
    networks:
      - spark-net
    restart: always

  # ------------------ DBT Service ------------------
  dbt:
    image: ghcr.io/dbt-labs/dbt-postgres:1.7.8
    container_name: dbt_service
    volumes:
      - ./dbt:/usr/app/dbt
      - ./data:/usr/app/data
    working_dir: /usr/app/dbt
    networks:
      - spark-net
    depends_on:
      - postgres
    entrypoint: ["/bin/bash", "-c", "sleep infinity"]
    restart: unless-stopped
    

  # ------------------ Iceberg REST Catalog ------------------
  iceberg-rest:
    image: tabulario/iceberg-rest:0.10.0
    container_name: iceberg-rest
    hostname: iceberg-rest
    ports:
      - "8181:8181"
    environment:
      - CATALOG_WAREHOUSE=s3://mimic-lakehouse/
      - CATALOG_IO__IMPL=org.apache.iceberg.aws.s3.S3FileIO
      - CATALOG_S3_ENDPOINT=http://minio1:9000
      - CATALOG_S3_ACCESS__KEY__ID=minio
      - CATALOG_S3_SECRET__ACCESS__KEY=minio123
      - CATALOG_S3_PATH__STYLE__ACCESS=true
      - AWS_REGION=us-east-1
    networks:
      - spark-net
    depends_on:
      - minio1
    restart: unless-stopped
    
  # ------------------ Trino ------------------
  trino:
    image: trinodb/trino:435
    container_name: trino
    hostname: trino
    ports:
      - "8084:8080"  # Trino Web UI & API
    environment:
      - AWS_REGION=us-east-1
      - AWS_ACCESS_KEY_ID=minio
      - AWS_SECRET_ACCESS_KEY=minio123
    volumes:
      - ./trino/etc:/etc/trino
    networks:
      - spark-net
    depends_on:
      - minio1
      - postgres
      - iceberg-rest
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/v1/info || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
      
  # ------------------ Apache Superset ------------------
  superset:
    image: apache/superset:latest
    container_name: superset
    hostname: superset
    ports:
      - "8088:8088"
    environment:
      - SUPERSET_SECRET_KEY=thisISaSECRET_1234
      - SUPERSET_LOAD_EXAMPLES=no
    volumes:
      - ./superset:/app/superset_home
    networks:
      - spark-net
    depends_on:
      - trino
      - postgres
    restart: unless-stopped
    command: >
      bash -c "
      pip install trino sqlalchemy-trino &&
      superset db upgrade &&
      superset fab create-admin --username admin --firstname Admin --lastname User --email admin@superset.com --password admin123 &&
      superset init &&
      superset run -h 0.0.0.0 -p 8088 --with-threads --reload --debugger
      "
    
volumes:
  minio1-data:
  minio2-data:
  minio3-data:
  postgres_data:
    driver: local

networks:
  spark-net:
    driver: bridge