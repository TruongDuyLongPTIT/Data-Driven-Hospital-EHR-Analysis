version: '3.8'

services:
  # ------------------ Spark Master ------------------
  spark-master:
    image: bitnami/spark:3.5.0
    container_name: spark-master
    hostname: spark-master
    user: "0"
    environment:
      - SPARK_MODE=master
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
      - HADOOP_USER_NAME=spark
      - SPARK_USER=spark
      - JAVA_OPTS=-Djava.security.auth.login.config=/dev/null
    ports:
      - "8080:8080"
      - "7077:7077"
    networks:
      - spark-net
    volumes:
      - ./data:/opt/bitnami/spark/data
      - ./spark-jars:/opt/bitnami/spark/ivy:z

  # ------------------ Spark Workers ------------------
  spark-worker-1:
    image: bitnami/spark:3.5.0
    container_name: spark-worker-1
    hostname: spark-worker-1
    user: "0"
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark-master:7077
      - HADOOP_USER_NAME=spark
      - SPARK_USER=spark
      - JAVA_OPTS=-Djava.security.auth.login.config=/dev/null
    depends_on:
      - spark-master
    ports:
      - "8081:8081"
    networks:
      - spark-net
    volumes:
      - ./spark-jars:/opt/bitnami/spark/ivy:z

  spark-worker-2:
    image: bitnami/spark:3.5.0
    container_name: spark-worker-2
    hostname: spark-worker-2
    user: "0"
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark-master:7077
      - HADOOP_USER_NAME=spark
      - SPARK_USER=spark
      - JAVA_OPTS=-Djava.security.auth.login.config=/dev/null
    depends_on:
      - spark-master
    ports:
      - "8082:8081"
    networks:
      - spark-net
    volumes:
      - ./spark-jars:/opt/bitnami/spark/ivy:z

  spark-worker-3:
    image: bitnami/spark:3.5.0
    container_name: spark-worker-3
    hostname: spark-worker-3
    user: "0"
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark-master:7077
      - HADOOP_USER_NAME=spark
      - SPARK_USER=spark
      - JAVA_OPTS=-Djava.security.auth.login.config=/dev/null
    depends_on:
      - spark-master
    ports:
      - "8083:8081"
    networks:
      - spark-net
    volumes:
      - ./spark-jars:/opt/bitnami/spark/ivy:z

  # ------------------ MinIO Cluster (3 Nodes) ------------------
  minio1:
    image: quay.io/minio/minio:latest
    container_name: minio1
    hostname: minio1
    volumes:
      - minio1-data:/data
    environment:
      - MINIO_ROOT_USER=minio
      - MINIO_ROOT_PASSWORD=minio123
    command: ["server", "http://minio{1...3}/data", "--console-address", ":9001"]
    ports:
      - "9001:9001"
      - "9000:9000"
    networks:
      - spark-net

  minio2:
    image: quay.io/minio/minio:latest
    container_name: minio2
    hostname: minio2
    volumes:
      - minio2-data:/data
    environment:
      - MINIO_ROOT_USER=minio
      - MINIO_ROOT_PASSWORD=minio123
    command: ["server", "http://minio{1...3}/data"]
    networks:
      - spark-net

  minio3:
    image: quay.io/minio/minio:latest
    container_name: minio3
    hostname: minio3
    volumes:
      - minio3-data:/data
    environment:
      - MINIO_ROOT_USER=minio
      - MINIO_ROOT_PASSWORD=minio123
    command: ["server", "http://minio{1...3}/data"]
    networks:
      - spark-net

  # ------------------ Postgres DB ------------------
  postgres:
    image: postgres:15.6
    container_name: postgres_db
    restart: unless-stopped
    environment:
      POSTGRES_DB: myapp_db
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin
      PGDATA: /var/lib/postgresql/data/pgdata
    command: 
      - "postgres"
      - "-c"
      - "max_connections=10000"
      - "-c"
      - "wal_level=logical"  # Required for Debezium CDC
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
      - "C:/DataUser/MIMIC Dataset/mimic-iv-3.1/hosp:/csv"
    networks:
      - spark-net

  # ------------------ Zookeeper (Required for Kafka) ------------------
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.3
    container_name: zookeeper
    hostname: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - spark-net
    volumes:
      - zookeeper-data:/var/lib/zookeeper/data
      - zookeeper-logs:/var/lib/zookeeper/log
    restart: unless-stopped

  # ------------------ Kafka ------------------
  kafka:
    image: confluentinc/cp-kafka:7.5.3
    container_name: kafka
    hostname: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "9093:9093"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:9093
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    networks:
      - spark-net
    volumes:
      - kafka-data:/var/lib/kafka/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:9092"]
      interval: 30s
      timeout: 10s
      retries: 5

  # ------------------ Kafka UI (Optional but recommended) ------------------
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    depends_on:
      - kafka
    ports:
      - "8085:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    networks:
      - spark-net
    restart: unless-stopped

  # ------------------ Debezium Connect ------------------
  debezium:
    image: debezium/connect:2.5
    container_name: debezium
    hostname: debezium
    depends_on:
      - kafka
      - postgres
    ports:
      - "8087:8083"
    environment:
      BOOTSTRAP_SERVERS: kafka:9092
      GROUP_ID: 1
      CONFIG_STORAGE_TOPIC: debezium_configs
      OFFSET_STORAGE_TOPIC: debezium_offsets
      STATUS_STORAGE_TOPIC: debezium_statuses
      # Increase replication factor for production
      CONFIG_STORAGE_REPLICATION_FACTOR: 1
      OFFSET_STORAGE_REPLICATION_FACTOR: 1
      STATUS_STORAGE_REPLICATION_FACTOR: 1
    networks:
      - spark-net
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8083/"]
      interval: 30s
      timeout: 10s
      retries: 5

  # ------------------ Debezium UI ------------------
  debezium-ui:
    image: debezium/debezium-ui:2.5
    container_name: debezium-ui
    hostname: debezium-ui
    depends_on:
      - debezium
    ports:
      - "8088:8080"
    environment:
      KAFKA_CONNECT_URIS: http://debezium:8083
    networks:
      - spark-net
    restart: unless-stopped

  # ------------------ Apache Flink JobManager ------------------
  flink-jobmanager:
    image: flink:1.18.1-scala_2.12-java11
    container_name: flink-jobmanager
    hostname: flink-jobmanager
    ports:
      - "8086:8081"  # Flink Web UI
    command: jobmanager
    environment:
      - JOB_MANAGER_RPC_ADDRESS=flink-jobmanager
    networks:
      - spark-net
    volumes:
      - ./flink/jobs:/opt/flink/usrlib
    restart: unless-stopped

  # ------------------ Apache Flink TaskManager ------------------
  flink-taskmanager:
    image: flink:1.18.1-scala_2.12-java11
    container_name: flink-taskmanager
    hostname: flink-taskmanager
    depends_on:
      - flink-jobmanager
    command: taskmanager
    environment:
      - JOB_MANAGER_RPC_ADDRESS=flink-jobmanager
    networks:
      - spark-net
    volumes:
      - ./flink/jobs:/opt/flink/usrlib
    restart: unless-stopped

  # ------------------ Airflow (Standalone) ------------------
  airflow:
    image: apache/airflow:2.8.1-python3.11
    container_name: airflow_standalone
    command: standalone
    environment:
      - AIRFLOW__CORE__LOAD_EXAMPLES=false
      - AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION=true
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./airflow/logs:/opt/airflow/logs
      - ./airflow/plugins:/opt/airflow/plugins
      - ./data:/opt/airflow/data
    ports:
      - "8090:8080"
    networks:
      - spark-net
    restart: always

  # ------------------ DBT Service ------------------
  dbt:
    image: ghcr.io/dbt-labs/dbt-postgres:1.7.8
    container_name: dbt_service
    volumes:
      - ./dbt:/usr/app/dbt
      - ./data:/usr/app/data
    working_dir: /usr/app/dbt
    networks:
      - spark-net
    depends_on:
      - postgres
    entrypoint: ["/bin/bash", "-c", "sleep infinity"]
    restart: unless-stopped

  # ------------------ Iceberg REST Catalog ------------------
  iceberg-rest:
    image: tabulario/iceberg-rest:0.10.0
    container_name: iceberg-rest
    hostname: iceberg-rest
    ports:
      - "8181:8181"
    environment:
      - CATALOG_WAREHOUSE=s3://mimic-lakehouse/
      - CATALOG_IO__IMPL=org.apache.iceberg.aws.s3.S3FileIO
      - CATALOG_S3_ENDPOINT=http://minio1:9000
      - CATALOG_S3_ACCESS__KEY__ID=minio
      - CATALOG_S3_SECRET__ACCESS__KEY=minio123
      - CATALOG_S3_PATH__STYLE__ACCESS=true
      - AWS_REGION=us-east-1
    networks:
      - spark-net
    depends_on:
      - minio1
    restart: unless-stopped

  # ------------------ Trino ------------------
  trino:
    image: trinodb/trino:435
    container_name: trino
    hostname: trino
    ports:
      - "8084:8080"
    environment:
      - AWS_REGION=us-east-1
      - AWS_ACCESS_KEY_ID=minio
      - AWS_SECRET_ACCESS_KEY=minio123
    volumes:
      - ./trino/etc:/etc/trino
    networks:
      - spark-net
    depends_on:
      - minio1
      - postgres
      - iceberg-rest
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/v1/info || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

volumes:
  minio1-data:
  minio2-data:
  minio3-data:
  postgres_data:
    driver: local
  zookeeper-data:
  zookeeper-logs:
  kafka-data:

networks:
  spark-net:
    driver: bridge